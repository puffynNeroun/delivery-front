// src/services/axios.ts
import axios from 'axios';

export const axiosInstance = axios.create({
    baseURL: 'http://localhost:5000/api',
    withCredentials: true, // üí° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–æ–≤
    headers: {
        'Content-Type': 'application/json',
    },
});

// üîÅ –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token
axiosInstance.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        if (
            error.response?.status === 401 &&
            !originalRequest._retry &&
            !originalRequest.url.includes('/auth/refresh')
        ) {
            originalRequest._retry = true;

            try {
                // –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
                await axiosInstance.post('/auth/refresh');

                // –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                return axiosInstance(originalRequest);
            } catch (refreshError) {
                console.error('üîÅ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError);
                return Promise.reject(refreshError);
            }
        }

        return Promise.reject(error);
    }
);
